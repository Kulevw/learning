@import "params.styl"

pad(c, offset)
  return (grid_size * c) + offset

get_breakpoints_keys()
  breakpoints_keys = keys(breakpoints)
  unshift(breakpoints_keys, '')
  return breakpoints_keys

media_down(min_width)
  @media screen and (min-width: min_width)
    {block}

class_bp_value(class, class_value, bp, props)
  .{class}{bp}-{class_value}
    {props}

get-up-bp($bp)
  $local_bp = '-' + $bp
  (breakpoints[$local_bp] - 1px)

get-down-bp($bp)
  $local_bp = '-' + $bp
  breakpoints[$local_bp]

index_of(arr, thing)
  for item, i in arr
    if thing == item
      return i
  return -1

make_adaptive_for_adaptive_class(bp, class_value, values)
  breakpoints_keys = get_breakpoints_keys()
  bp_num = index_of(breakpoints_keys, bp)
  if index_of(keys(values), bp) != -1
    for local_bp in breakpoints_keys
      local_bp_num = index_of(breakpoints_keys, local_bp)
      if local_bp_num <= bp_num
        value = value_of_adaptive_values(values, bp)
        class_bp_value('fs', class_value, local_bp, value)
  else
    value = value_of_adaptive_values(values, bp)
    class_bp_value('fs', class_value, bp, value)

// получить адаптивное значаение адаптивного класса
value_of_adaptive_values(values, bp)
  // получаем ключи всех брейкпоинтов
  breakpoints_keys = get_breakpoints_keys()
  // получаем индекс текущего брейкпоинта
  bp_num = index_of(breakpoints_keys, bp)
  // если на пустом брейкпоинте возвращаем знаечние для пустого брейкпоинта
  if bp_num == '0'
    return values['']
  // если в значениях нет текущего брейкпоинта, проверяем следующий по убыванию
  if index_of(keys(values), bp) == -1
    return value_of_adaptive_values(values, breakpoints_keys[bp_num - 1])
  // возвращаем значение для текущего брейкпоинта
  return values[breakpoints_keys[bp_num]]
