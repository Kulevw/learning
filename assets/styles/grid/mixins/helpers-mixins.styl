index_of(arr, thing)
  for item, i in arr
    if thing == item
      return i
  return -1

pad(k, offset = 0)
  return ($grid_size * k) + offset

c(args...)
  normalize_args = ()
  for arg in args
    if arg != ''
      push(normalize_args, arg)
  .{join('-', normalize_args)}
    {block}

gc(args...)
  normalize_args = ()
  for arg in args
    if arg != ''
      push(normalize_args, arg)
  return join('-', normalize_args)

media_down_bp(bp)
  if bp
    @media screen and (min-width: $breakpoints[bp])
      {block}
  else
    {block}

make_classes(classes)
  for class_name, class_values in classes
    for class_value, props in class_values
      +c(class_name, class_value)
        {props}

make_adaptive_classes(adaptive_classes, bp = '')
  for class_name, class_values in adaptive_classes
    for class_value, props in class_values
      +c(class_name, bp, class_value)
        {props}

make_mega_adaptive_classes(mega_adaptive_classes, bp = '')
  for class_name, class_values in mega_adaptive_classes
    for class_value, adaptive_props in class_values
      fn(props, bp)
        +c(class_name, bp, class_value)
          {props}
      make_mega_adaptive_class(adaptive_props, bp, fn)

make_mega_adaptive_class(adaptive_props, bp, cb)
  bps_keys = keys($breakpoints)
  bp_index = index_of(bps_keys, bp)
  props = get_adaptive_props(adaptive_props, bp)

  if index_of(keys(adaptive_props), bp) != -1
    for local_bp in bps_keys
      local_bp_index = index_of(bps_keys, local_bp)
      if local_bp_index < bp_index
        cb(props, local_bp)
  cb(props, bp)

get_adaptive_props(adaptive_props, bp)
  bps_keys = keys($breakpoints)
  bp_index = index_of(bps_keys, bp)
  if bp_index == 0
    return adaptive_props['']
  if index_of(keys(adaptive_props), bp) == -1
    return get_adaptive_props(adaptive_props, bps_keys[bp_index - 1])
  return adaptive_props[bps_keys[bp_index]]
